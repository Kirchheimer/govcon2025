name: OWASP ZAP Security Scan

on:
  push:
    branches:
      - testbot/security-test-run
  pull_request:
    branches:
      - main
      - develop
  schedule:
    # Run weekly security scans on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  zap_scan:
    runs-on: ubuntu-latest
    name: OWASP ZAP Security Scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create ZAP scan configuration
        run: |
          mkdir -p zap-config
          
          # Create ZAP configuration file
          cat > zap-config/zap-baseline.conf << 'EOF'
          # ZAP Baseline Configuration
          # This file contains URLs and configuration for OWASP ZAP baseline scan
          
          # Ignore specific alerts that are expected or acceptable
          # Format: IGNORE_ALERT_ID:URL_REGEX
          # Example: 10021:.*  # Ignore X-Content-Type-Options header missing
          
          # Common false positives for educational/demo sites
          10021:.*  # X-Content-Type-Options Header Missing
          10020:.*  # X-Frame-Options Header Missing (acceptable for demo sites)
          10016:.*  # Web Browser XSS Protection Not Enabled
          EOF
          
          # Create URL list for scanning
          cat > zap-config/urls.txt << 'EOF'
          https://about.google/
          https://blog.google/inside-google/doodles/
          https://blog.google/outreach-initiatives/public-policy/
          EOF

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'https://about.google/'
          rules_file_name: 'zap-config/zap-baseline.conf'
          cmd_options: '-a -d -T 5 -m 2'
          allow_issue_writing: false

      - name: Run OWASP ZAP Full Scan on Additional URLs
        run: |
          # ZAP is pulled via the docker run command, no need for a separate pull step.
          
          # Create results directory
          mkdir -p zap-results
          
          # Scan each URL from our configuration
          while IFS= read -r url; do
            if [ ! -z "$url" ] && [[ ! "$url" =~ ^#.* ]]; then
              echo "Scanning: $url"
              
              # Extract domain for filename
              domain=$(echo "$url" | sed 's|https\?://||' | sed 's|/.*||' | sed 's|\.|-|g')
              
              # Run ZAP baseline scan
              docker run -v $(pwd):/zap/wrk/:rw \
                -t ghcr.io/zaproxy/zaproxy:stable \
                zap-baseline.py \
                -t "$url" \
                -g gen.conf \
                -r "zap-results/zap-report-${domain}.html" \
                -x "zap-results/zap-report-${domain}.xml" \
                -J "zap-results/zap-report-${domain}.json" \
                -a \
                -d \
                -T 5 \
                -m 2 || true  # Don't fail the build on security findings
            fi
          done < zap-config/urls.txt

      - name: Process ZAP Results
        if: always()
        run: |
          echo "## 🔒 OWASP ZAP Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "zap-results" ] && [ "$(ls -A zap-results)" ]; then
            echo "### Scan Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Count total findings
            total_files=$(find zap-results -name "*.json" | wc -l)
            echo "📊 **Scanned URLs**: $total_files" >> $GITHUB_STEP_SUMMARY
            
            # Process each JSON report
            for json_file in zap-results/*.json; do
              if [ -f "$json_file" ]; then
                filename=$(basename "$json_file" .json)
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "#### Results for ${filename}" >> $GITHUB_STEP_SUMMARY
                
                # Extract basic stats from JSON (simplified)
                if command -v jq >/dev/null 2>&1; then
                  high_alerts=$(jq '.site[0].alerts[] | select(.riskdesc | contains("High"))' "$json_file" 2>/dev/null | jq -s length 2>/dev/null || echo "0")
                  medium_alerts=$(jq '.site[0].alerts[] | select(.riskdesc | contains("Medium"))' "$json_file" 2>/dev/null | jq -s length 2>/dev/null || echo "0")
                  low_alerts=$(jq '.site[0].alerts[] | select(.riskdesc | contains("Low"))' "$json_file" 2>/dev/null | jq -s length 2>/dev/null || echo "0")
                  
                  echo "- 🔴 **High Risk**: $high_alerts" >> $GITHUB_STEP_SUMMARY
                  echo "- 🟡 **Medium Risk**: $medium_alerts" >> $GITHUB_STEP_SUMMARY
                  echo "- 🟢 **Low Risk**: $low_alerts" >> $GITHUB_STEP_SUMMARY
                else
                  echo "- ℹ️ Detailed analysis requires jq (not available in this environment)" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            done
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Security Categories Tested" >> $GITHUB_STEP_SUMMARY
            echo "- **Injection Flaws**: SQL injection, XSS, command injection" >> $GITHUB_STEP_SUMMARY
            echo "- **Authentication**: Session management, password policies" >> $GITHUB_STEP_SUMMARY
            echo "- **Sensitive Data**: Information disclosure, data protection" >> $GITHUB_STEP_SUMMARY
            echo "- **Security Headers**: HSTS, CSP, X-Frame-Options, etc." >> $GITHUB_STEP_SUMMARY
            echo "- **HTTPS Configuration**: SSL/TLS implementation" >> $GITHUB_STEP_SUMMARY
            echo "- **Input Validation**: Parameter tampering, file upload issues" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📋 **Full reports** are available in the uploaded artifacts." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ No ZAP results found. Check the workflow logs for errors." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload ZAP Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-security-reports
          path: |
            zap-results/
            zap-config/
          retention-days: 30

      - name: Security Findings Summary
        if: always()
        run: |
          echo "=== OWASP ZAP Security Scan Completed ==="
          echo "Scan Date: $(date)"
          echo "Scanned URLs:"
          cat zap-config/urls.txt | grep -v '^#' | grep -v '^$'
          echo ""
          echo "Reports generated:"
          find zap-results -name "*.html" -o -name "*.json" -o -name "*.xml" 2>/dev/null || echo "No report files found"
          echo ""
          echo "Note: This is an educational demonstration."
          echo "In production, configure appropriate security thresholds and alerting."

      - name: Comment on PR with Security Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## 🔒 OWASP ZAP Security Scan Results\n\n';
            comment += 'Automated security vulnerability assessment completed.\n\n';
            
            // Check if results directory exists
            if (fs.existsSync('zap-results')) {
              const files = fs.readdirSync('zap-results');
              const reportCount = files.filter(f => f.endsWith('.json')).length;
              
              comment += `✅ Security scan completed successfully.\n`;
              comment += `📊 Analyzed ${reportCount} URL(s) for security vulnerabilities.\n\n`;
              comment += '### Security Areas Tested:\n';
              comment += '- Injection vulnerabilities (SQL, XSS, etc.)\n';
              comment += '- Authentication and session management\n';
              comment += '- Security headers and HTTPS configuration\n';
              comment += '- Information disclosure risks\n';
              comment += '- Input validation issues\n\n';
              comment += '📋 Detailed security reports have been uploaded as artifacts.\n';
              comment += '⚠️ Review any high or medium risk findings before deployment.\n';
            } else {
              comment += '❌ Security scan encountered issues. Check the workflow logs.\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
